{% extends 'base.html.twig' %}

{% block title %}CryptoTracker - Flexibank{% endblock %}

{% block stylesheets %}

<link rel="stylesheet" href="{{ asset('css/crypto/index.css') }}" />

{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // State variables
            let cryptos = [];
            let selectedCrypto = 'bitcoin';
            let timeframe = '7';
            let chartData = null;
            let chart = null;
            
            // DOM elements
            const cryptoListElement = document.getElementById('crypto-list');
            const marketTableElement = document.getElementById('market-table');
            const chartContainer = document.getElementById('chart-container');
            const searchInput = document.getElementById('search-input');
            const refreshButton = document.getElementById('refresh-button');
            const errorContainer = document.getElementById('error-container');
            const timeframeButtons = document.querySelectorAll('.timeframe-button');
            const cryptoDetailsElement = document.getElementById('crypto-details');
            const cryptoStatsElement = document.getElementById('crypto-stats');
            
            // Format helpers
            const formatPrice = (price) => {
                return new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 6
                }).format(price);
            };
            
            const formatMarketCap = (marketCap) => {
                if (marketCap >= 1e12) {
                    return `$${(marketCap / 1e12).toFixed(2)}T`;
                } else if (marketCap >= 1e9) {
                    return `$${(marketCap / 1e9).toFixed(2)}B`;
                } else if (marketCap >= 1e6) {
                    return `$${(marketCap / 1e6).toFixed(2)}M`;
                } else {
                    return `$${marketCap.toFixed(2)}`;
                }
            };
            
            const formatDate = (timestamp) => {
                const date = new Date(timestamp);
                return date.toLocaleDateString();
            };
            
            // Fetch cryptocurrency data
            const fetchCryptos = async () => {
                try {
                    showLoading(true);
                    const response = await axios.get(
                        'https://api.coingecko.com/api/v3/coins/markets',
                        {
                            params: {
                                vs_currency: 'usd',
                                order: 'market_cap_desc',
                                per_page: 20,
                                page: 1,
                                sparkline: false,
                            },
                        }
                    );
                    cryptos = response.data;
                    renderCryptoList();
                    renderMarketTable();
                    updateCryptoDetails();
                    showLoading(false);
                    fetchChartData();
                } catch (err) {
                    showError('Failed to fetch cryptocurrency data. API rate limit may have been reached.');
                    showLoading(false);
                }
            };
            
            // Fetch chart data
            const fetchChartData = async () => {
                try {
                    if (!selectedCrypto) return;
                    
                    const response = await axios.get(
                        `https://api.coingecko.com/api/v3/coins/${selectedCrypto}/market_chart`,
                        {
                            params: {
                                vs_currency: 'usd',
                                days: timeframe,
                            },
                        }
                    );
                    chartData = response.data;
                    renderChart();
                } catch (err) {
                    showError('Failed to fetch chart data. API rate limit may have been reached.');
                }
            };
            
            // Render cryptocurrency list
            const renderCryptoList = () => {
                if (!cryptoListElement) return;
                
                const searchTerm = searchInput ? searchInput.value.toLowerCase() : '';
                const filteredCryptos = cryptos.filter(crypto =>
                    crypto.name.toLowerCase().includes(searchTerm) ||
                    crypto.symbol.toLowerCase().includes(searchTerm)
                );
                
                cryptoListElement.innerHTML = '';
                
                if (filteredCryptos.length === 0) {
                    cryptoListElement.innerHTML = '<div class="text-gray-400 text-center py-4">No cryptocurrencies found</div>';
                    return;
                }
                
                filteredCryptos.forEach(crypto => {
                    const listItem = document.createElement('li');
                    listItem.className = `crypto-list-item ${selectedCrypto === crypto.id ? 'active' : ''}`;
                    listItem.onclick = () => selectCrypto(crypto.id);
                    
                    const priceChangeClass = crypto.price_change_percentage_24h >= 0 ? 'trend-up' : 'trend-down';
                    const trendIcon = crypto.price_change_percentage_24h >= 0 ? 
                        '<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1"><polyline points="23 6 13.5 15.5 8.5 10.5 1 18"></polyline><polyline points="17 6 23 6 23 12"></polyline></svg>' : 
                        '<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1"><polyline points="23 18 13.5 8.5 8.5 13.5 1 6"></polyline><polyline points="17 18 23 18 23 12"></polyline></svg>';
                    
                    listItem.innerHTML = `
                        <div class="flex items-center space-x-3">
                            <img src="${crypto.image}" alt="${crypto.name}" class="w-8 h-8 rounded-full">
                            <div>
                                <p class="font-medium">${crypto.name}</p>
                                <p class="text-sm text-gray-400 uppercase">${crypto.symbol}</p>
                            </div>
                        </div>
                        <div class="text-right">
                            <p class="font-medium">${formatPrice(crypto.current_price)}</p>
                            <p class="text-sm flex items-center justify-end ${priceChangeClass}">
                                ${trendIcon}
                                ${Math.abs(crypto.price_change_percentage_24h).toFixed(2)}%
                            </p>
                        </div>
                    `;
                    
                    cryptoListElement.appendChild(listItem);
                });
            };
            
            // Render market table
            const renderMarketTable = () => {
                if (!marketTableElement) return;
                
                const searchTerm = searchInput ? searchInput.value.toLowerCase() : '';
                const filteredCryptos = cryptos.filter(crypto =>
                    crypto.name.toLowerCase().includes(searchTerm) ||
                    crypto.symbol.toLowerCase().includes(searchTerm)
                );
                
                const tableBody = marketTableElement.querySelector('tbody');
                if (!tableBody) return;
                
                tableBody.innerHTML = '';
                
                filteredCryptos.forEach(crypto => {
                    const row = document.createElement('tr');
                    row.className = 'border-b border-gray-700 hover:bg-gray-700 cursor-pointer';
                    row.onclick = () => selectCrypto(crypto.id);
                    
                    const priceChangeClass = crypto.price_change_percentage_24h >= 0 ? 'trend-up' : 'trend-down';
                    const trendIcon = crypto.price_change_percentage_24h >= 0 ? 
                        '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1"><polyline points="23 6 13.5 15.5 8.5 10.5 1 18"></polyline><polyline points="17 6 23 6 23 12"></polyline></svg>' : 
                        '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1"><polyline points="23 18 13.5 8.5 8.5 13.5 1 6"></polyline><polyline points="17 18 23 18 23 12"></polyline></svg>';
                    
                    row.innerHTML = `
                        <td class="py-4">${crypto.market_cap_rank}</td>
                        <td class="py-4">
                            <div class="flex items-center space-x-3">
                                <img src="${crypto.image}" alt="${crypto.name}" class="w-6 h-6 rounded-full">
                                <div>
                                    <p class="font-medium">${crypto.name}</p>
                                    <p class="text-xs text-gray-400 uppercase">${crypto.symbol}</p>
                                </div>
                            </div>
                        </td>
                        <td class="py-4 text-right">${formatPrice(crypto.current_price)}</td>
                        <td class="py-4 text-right ${priceChangeClass}">
                            <div class="flex items-center justify-end">
                                ${trendIcon}
                                ${Math.abs(crypto.price_change_percentage_24h).toFixed(2)}%
                            </div>
                        </td>
                        <td class="py-4 text-right">${formatMarketCap(crypto.market_cap)}</td>
                        <td class="py-4 text-right">${formatMarketCap(crypto.total_volume)}</td>
                    `;
                    
                    tableBody.appendChild(row);
                });
            };
            
            // Update crypto details
            const updateCryptoDetails = () => {
                if (!cryptoDetailsElement) return;
                
                const crypto = cryptos.find(c => c.id === selectedCrypto);
                if (!crypto) return;
                
                const priceChangeClass = crypto.price_change_percentage_24h >= 0 ? 'trend-up' : 'trend-down';
                const trendIcon = crypto.price_change_percentage_24h >= 0 ? 
                    '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1"><polyline points="23 6 13.5 15.5 8.5 10.5 1 18"></polyline><polyline points="17 6 23 6 23 12"></polyline></svg>' : 
                    '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1"><polyline points="23 18 13.5 8.5 8.5 13.5 1 6"></polyline><polyline points="17 18 23 18 23 12"></polyline></svg>';
                
                cryptoDetailsElement.innerHTML = `
                    <div class="flex items-center space-x-3">
                        <img src="${crypto.image}" alt="${crypto.name}" class="w-10 h-10 rounded-full">
                        <div>
                            <h2 class="text-xl font-bold">${crypto.name}</h2>
                            <div class="flex items-center space-x-2">
                                <span class="text-gray-400 uppercase">${crypto.symbol}</span>
                                <span class="flex items-center ${priceChangeClass}">
                                    ${trendIcon}
                                    ${Math.abs(crypto.price_change_percentage_24h).toFixed(2)}%
                                </span>
                            </div>
                        </div>
                    </div>
                `;
                
                // Update crypto stats
                if (cryptoStatsElement) {
                    cryptoStatsElement.innerHTML = `
                        <div class="bg-gray-700 p-4 rounded-lg">
                            <p class="text-gray-400 text-sm">Current Price</p>
                            <p class="text-xl font-bold">${formatPrice(crypto.current_price)}</p>
                        </div>
                        <div class="bg-gray-700 p-4 rounded-lg">
                            <p class="text-gray-400 text-sm">24h Change</p>
                            <p class="text-xl font-bold ${crypto.price_change_24h >= 0 ? 'trend-up' : 'trend-down'}">
                                ${formatPrice(crypto.price_change_24h)}
                            </p>
                        </div>
                        <div class="bg-gray-700 p-4 rounded-lg">
                            <p class="text-gray-400 text-sm">Market Cap</p>
                            <p class="text-xl font-bold">${formatMarketCap(crypto.market_cap)}</p>
                        </div>
                        <div class="bg-gray-700 p-4 rounded-lg">
                            <p class="text-gray-400 text-sm">24h Volume</p>
                            <p class="text-xl font-bold">${formatMarketCap(crypto.total_volume)}</p>
                        </div>
                    `;
                }
            };
            
            // Render chart
            const renderChart = () => {
                if (!chartContainer || !chartData || !chartData.prices || chartData.prices.length === 0) return;
                
                const canvas = chartContainer.querySelector('canvas');
                if (!canvas) {
                    const newCanvas = document.createElement('canvas');
                    chartContainer.innerHTML = '';
                    chartContainer.appendChild(newCanvas);
                }
                
                // Destroy existing chart if it exists
                if (chart) {
                    chart.destroy();
                }
                
                const ctx = chartContainer.querySelector('canvas').getContext('2d');
                if (!ctx) return;
                
                const crypto = cryptos.find(c => c.id === selectedCrypto);
                const color = crypto && crypto.price_change_percentage_24h >= 0 
                    ? 'rgba(52, 211, 153, 1)' 
                    : 'rgba(239, 68, 68, 1)';
                
                const gradient = ctx.createLinearGradient(0, 0, 0, 400);
                gradient.addColorStop(0, crypto && crypto.price_change_percentage_24h >= 0 
                    ? 'rgba(52, 211, 153, 0.5)' 
                    : 'rgba(239, 68, 68, 0.5)');
                gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');
                
                chart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: chartData.prices.map(price => formatDate(price[0])),
                        datasets: [{
                            label: 'Price',
                            data: chartData.prices.map(price => price[1]),
                            borderColor: color,
                            backgroundColor: gradient,
                            borderWidth: 2,
                            pointRadius: 0,
                            pointHoverRadius: 4,
                            tension: 0.4,
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: false
                            },
                            tooltip: {
                                mode: 'index',
                                intersect: false,
                                callbacks: {
                                    label: function(context) {
                                        return `Price: ${formatPrice(context.raw)}`;
                                    }
                                }
                            }
                        },
                        scales: {
                            x: {
                                grid: {
                                    display: false
                                },
                                ticks: {
                                    maxTicksLimit: 8,
                                    callback: function(value, index) {
                                        if (chartData && chartData.prices && chartData.prices.length > 0) {
                                            const dataPointIndex = Math.min(
                                                Math.floor(index * (chartData.prices.length / 8)),
                                                chartData.prices.length - 1
                                            );
                                            if (dataPointIndex >= 0 && chartData.prices[dataPointIndex]) {
                                                return formatDate(chartData.prices[dataPointIndex][0]);
                                            }
                                        }
                                        return '';
                                    }
                                }
                            },
                            y: {
                                grid: {
                                    color: 'rgba(200, 200, 200, 0.2)'
                                },
                                ticks: {
                                    callback: function(value) {
                                        return formatPrice(value);
                                    }
                                }
                            }
                        },
                        interaction: {
                            intersect: false,
                            mode: 'index'
                        }
                    }
                });
            };
            
            // Select cryptocurrency
            const selectCrypto = (cryptoId) => {
                selectedCrypto = cryptoId;
                updateCryptoDetails();
                fetchChartData();
                renderCryptoList(); // Update active state in list
            };
            
            // Select timeframe
            const selectTimeframe = (newTimeframe) => {
                timeframe = newTimeframe;
                
                // Update active state for timeframe buttons
                timeframeButtons.forEach(button => {
                    if (button.dataset.timeframe === timeframe) {
                        button.classList.add('active');
                    } else {
                        button.classList.remove('active');
                    }
                });
                
                fetchChartData();
            };
            
            // Show/hide loading spinner
            const showLoading = (isLoading) => {
                const loadingSpinner = document.getElementById('loading-spinner');
                if (loadingSpinner) {
                    loadingSpinner.style.display = isLoading ? 'flex' : 'none';
                }
                
                if (refreshButton) {
                    const refreshIcon = refreshButton.querySelector('svg');
                    if (refreshIcon) {
                        if (isLoading) {
                            refreshIcon.classList.add('animate-spin');
                        } else {
                            refreshIcon.classList.remove('animate-spin');
                        }
                    }
                }
            };
            
            // Show error message
            const showError = (message) => {
                if (!errorContainer) return;
                
                errorContainer.innerHTML = message;
                errorContainer.style.display = message ? 'block' : 'none';
            };
            
            // Event listeners
            if (searchInput) {
                searchInput.addEventListener('input', () => {
                    renderCryptoList();
                    renderMarketTable();
                });
            }
            
            if (refreshButton) {
                refreshButton.addEventListener('click', fetchCryptos);
            }
            
            timeframeButtons.forEach(button => {
                button.addEventListener('click', () => {
                    selectTimeframe(button.dataset.timeframe);
                });
            });
            
            // Initialize
            fetchCryptos();
        });
    </script>
{% endblock %}

{% block body %}
    <div class="min-h-screen bg-gray-900 text-white">
        <!-- Header -->
        <header class="bg-gray-800 py-4 px-6 shadow-md">
                        <a onclick="window.history.back();" class="back-button">
        ← Retour
    </a>
            <div class="container mx-auto flex justify-between items-center">
    <div class="flex items-center space-x-2">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-yellow-500">
            <path d="M11.767 19.089c4.924.868 6.14-6.025 1.216-6.894m-1.216 6.894L5.86 18.047m5.908 1.042-.347 1.97m1.563-8.864c4.924.869 6.14-6.025 1.215-6.893m-1.215 6.893-3.94-.694m5.155-6.2L8.29 4.26m5.908 1.042.348-1.97"></path>
        </svg>
        <h1 class="text-2xl font-bold header-title">CryptoTracker</h1>
    </div>
</div>

        </header>

        <main class="container mx-auto py-6 px-4">
            <!-- Error Container -->
            <div id="error-container" class="bg-red-500 text-white p-4 rounded-md mb-6" style="display: none;"></div>

            <!-- Search Bar -->
            <div class="mb-6 relative">
                <div class="relative">
                    <input
                        type="text"
                        id="search-input"
                        placeholder="Search cryptocurrencies..."
                        class="w-full bg-gray-800 border border-gray-700 rounded-lg py-3 px-4 pl-12 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                        aria-label="Search cryptocurrencies"
                    />
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="absolute left-4 top-3.5 h-5 w-5 text-gray-400">
                        <circle cx="11" cy="11" r="8"></circle><path d="m21 21-4.3-4.3"></path>
                    </svg>
                </div>
            </div>

            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <!-- Chart Section -->
                <div class="lg:col-span-2 bg-gray-800 rounded-xl p-6 shadow-lg">
                    <div class="flex justify-between items-center mb-6">
                        <div id="crypto-details">
                            <!-- Crypto details will be populated by JavaScript -->
                            <div class="flex items-center space-x-3">
                                <div class="w-10 h-10 rounded-full bg-gray-700" aria-hidden="true"></div>
                                <div>
                                    <h2 class="text-xl font-bold">Loading...</h2>
                                    <div class="flex items-center space-x-2">
                                        <span class="text-gray-400">...</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="flex space-x-2">
                            <button data-timeframe="1" class="timeframe-button">24h</button>
                            <button data-timeframe="7" class="timeframe-button active">7d</button>
                            <button data-timeframe="30" class="timeframe-button">30d</button>
                            <button data-timeframe="365" class="timeframe-button">1y</button>
                        </div>
                    </div>
                    
                    <div id="chart-container" class="chart-container">
                        <div class="h-full flex items-center justify-center">
                            <p class="text-gray-400">Loading chart data...</p>
                        </div>
                    </div>

                    <div id="crypto-stats" class="mt-6 grid grid-cols-2 md:grid-cols-4 gap-4">
                        <!-- Crypto stats will be populated by JavaScript -->
                        <div class="bg-gray-700 p-4 rounded-lg">
                            <p class="text-gray-400 text-sm">Current Price</p>
                            <p class="text-xl font-bold">Loading...</p>
                        </div>
                        <div class="bg-gray-700 p-4 rounded-lg">
                            <p class="text-gray-400 text-sm">24h Change</p>
                            <p class="text-xl font-bold">Loading...</p>
                        </div>
                        <div class="bg-gray-700 p-4 rounded-lg">
                            <p class="text-gray-400 text-sm">Market Cap</p>
                            <p class="text-xl font-bold">Loading...</p>
                        </div>
                        <div class="bg-gray-700 p-4 rounded-lg">
                            <p class="text-gray-400 text-sm">24h Volume</p>
                            <p class="text-xl font-bold">Loading...</p>
                        </div>
                    </div>
                </div>

                <!-- Crypto List -->
                <div class="bg-gray-800 rounded-xl p-6 shadow-lg overflow-hidden">
                    <h2 class="text-xl font-bold mb-4">Top Cryptocurrencies</h2>
                    <div class="overflow-y-auto max-h-[600px] pr-2 -mr-2">
                        <div id="loading-spinner" class="flex justify-center items-center h-40">
                            <div class="loading-spinner"></div>
                        </div>
                        <ul id="crypto-list" class="space-y-3">
                            <!-- Crypto list will be populated by JavaScript -->
                        </ul>
                    </div>
                </div>
            </div>

            <!-- Market Overview -->
            <div class="mt-6 bg-gray-800 rounded-xl p-6 shadow-lg">
                <h2 class="text-xl font-bold mb-4">Market Overview</h2>
                <div class="overflow-x-auto">
                    <table class="min-w-full">
                        <thead>
                            <tr class="border-b border-gray-700">
                                <th class="py-3 text-left">#</th>
                                <th class="py-3 text-left">Name</th>
                                <th class="py-3 text-right">Price</th>
                                <th class="py-3 text-right">24h %</th>
                                <th class="py-3 text-right">Market Cap</th>
                                <th class="py-3 text-right">Volume (24h)</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Market table will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
        </main>

        <footer class="bg-gray-800 py-6 mt-12">
            <div class="container mx-auto px-4 text-center text-gray-400">
                <p>Data provided by CoinGecko API. Updated in real-time.</p>
                <p class="mt-2">&copy; {{ "now"|date("Y") }} CryptoTracker. All rights reserved.</p>
            </div>
        </footer>
    </div>
{% endblock %}