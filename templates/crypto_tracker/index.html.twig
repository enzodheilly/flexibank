{% extends 'base.html.twig' %}

{% block title %}CryptoTracker{% endblock %}

{% block stylesheets %}
{{ parent() }}
<style>

    body {
        font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
        color: #1f2937;
        background-color: #f9fafb;
        margin: 0;
        padding: 0;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }
    .back-button {
        position: absolute;
        top: 25px;
        left: 20px;
        background-color: #002d72;
        color: white;
        padding: 10px 15px;
        text-decoration: none;
        border-radius: 5px;
        font-size: 1em;
        font-weight: bold;
    }

    .back-button:hover {
        background-color: #0056b3;
    }
    /* Tailwind-like utility classes */
    .min-h-screen { min-height: 100vh; }
    .bg-gray-900 { background-color: #111827; }
    .bg-gray-800 { background-color: #002d72; }
    .bg-gray-700 { background-color: #374151; }
    .bg-gray-600 { background-color: #4b5563; }
    .bg-blue-600 { background-color: #2563eb; }
    .bg-blue-700 { background-color: #1d4ed8; }
    .bg-red-500 { background-color: #ef4444; }
    .bg-green-400 { color: #34d399; }
    .bg-red-400 { color: #f87171; }
    .text-white { color: #ffffff; }
    .text-gray-400 { color: #9ca3af; }
    .text-green-400 { color: #34d399; }
    .text-red-400 { color: #f87171; }
    .text-yellow-500 { color: #eab308; }
    .text-gray-700 { color: #374151; }
    .text-gray-800 { color: #1f2937; }
    .text-blue-500 { color: #3b82f6; }
    .border-gray-700 { border-color: #374151; }
    .border-blue-500 { border-color: #3b82f6; }
    .shadow-md { box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06); }
    .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05); }
    .rounded-md { border-radius: 0.375rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .rounded-xl { border-radius: 0.75rem; }
    .rounded-full { border-radius: 9999px; }
    .font-bold { font-weight: 700; }
    .font-medium { font-weight: 500; }
    .font-semibold { font-weight: 600; }
    .text-2xl { font-size: 1.5rem; line-height: 2rem; }
    .text-xl { font-size: 1.25rem; line-height: 1.75rem; }
    .text-lg { font-size: 1.125rem; line-height: 1.75rem; }
    .text-sm { font-size: 0.875rem; line-height: 1.25rem; }
    .text-xs { font-size: 0.75rem; line-height: 1rem; }
    .py-6 { padding-top: 1.5rem; padding-bottom: 1.5rem; }
    .py-4 { padding-top: 1rem; padding-bottom: 1rem; }
    .py-3 { padding-top: 0.75rem; padding-bottom: 0.75rem; }
    .py-2 { padding-top: 0.5rem; padding-bottom: 0.5rem; }
    .py-1 { padding-top: 0.25rem; padding-bottom: 0.25rem; }
    .px-6 { padding-left: 1.5rem; padding-right: 1.5rem; }
    .px-4 { padding-left: 1rem; padding-right: 1rem; }
    .px-3 { padding-left: 0.75rem; padding-right: 0.75rem; }
    .pl-12 { padding-left: 3rem; }
    .p-8 { padding: 2rem; }
    .p-6 { padding: 1.5rem; }
    .p-4 { padding: 1rem; }
    .p-3 { padding: 0.75rem; }
    .m-1 { margin: 0.25rem; }
    .mt-12 { margin-top: 3rem; }
    .mt-6 { margin-top: 1.5rem; }
    .mt-4 { margin-top: 1rem; }
    .mt-2 { margin-top: 0.5rem; }
    .mt-1 { margin-top: 0.25rem; }
    .mb-6 { margin-bottom: 1.5rem; }
    .mb-4 { margin-bottom: 1rem; }
    .mb-2 { margin-bottom: 0.5rem; }
    .mr-2 { margin-right: 0.5rem; }
    .mr-1 { margin-right: 0.25rem; }
    .ml-2 { margin-left: 0.5rem; }
    .ml-1 { margin-left: 0.25rem; }
    .space-x-4 > * + * { margin-left: 1rem; }
    .space-x-3 > * + * { margin-left: 0.75rem; }
    .space-x-2 > * + * { margin-left: 0.5rem; }
    .space-x-1 > * + * { margin-left: 0.25rem; }
    .space-y-3 > * + * { margin-top: 0.75rem; }
    .h-80 { height: 20rem; }
    .h-40 { height: 10rem; }
    .h-10 { height: 2.5rem; }
    .h-8 { height: 2rem; }
    .h-6 { height: 1.5rem; }
    .h-5 { height: 1.25rem; }
    .h-4 { height: 1rem; }
    .h-3 { height: 0.75rem; }
    .w-full { width: 100%; }
    .w-10 { width: 2.5rem; }
    .w-8 { width: 2rem; }
    .w-6 { width: 1.5rem; }
    .w-5 { width: 1.25rem; }
    .w-4 { width: 1rem; }
    .w-3 { width: 0.75rem; }
    .max-h-\[600px\] { max-height: 600px; }
    .min-w-full { min-width: 100%; }
    .flex { display: flex; }
    .grid { display: grid; }
    .hidden { display: none; }
    .flex-col { flex-direction: column; }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .justify-between { justify-content: space-between; }
    .justify-end { justify-content: flex-end; }
    .flex-1 { flex: 1 1 0%; }
    .overflow-hidden { overflow: hidden; }
    .overflow-x-auto { overflow-x: auto; }
    .overflow-y-auto { overflow-y: auto; }
    .relative { position: relative; }
    .absolute { position: absolute; }
    .top-3\.5 { top: 0.875rem; }
    .left-4 { left: 1rem; }
    .container { width: 100%; max-width: 1280px; margin-left: auto; margin-right: auto; }
    .cursor-pointer { cursor: pointer; }
    .transition-colors { transition-property: color, background-color, border-color; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); transition-duration: 150ms; }
    .focus\:outline-none:focus { outline: 2px solid transparent; outline-offset: 2px; }
    .focus\:ring-2:focus { box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000); }
    .focus\:ring-blue-500:focus { --tw-ring-color: #3b82f6; }
    .hover\:bg-blue-700:hover { background-color: #1d4ed8; }
    .hover\:bg-gray-700:hover { background-color: #374151; }
    .hover\:bg-gray-600:hover { background-color: #4b5563; }
    .border { border-width: 1px; }
    .border-b { border-bottom-width: 1px; }
    .border-t-2 { border-top-width: 2px; }
    .border-b-2 { border-bottom-width: 2px; }
    .animate-spin { animation: spin 1s linear infinite; }
    @keyframes spin { from { transform: rotate(0deg); } to { transform: rotate(360deg); } }
    
    /* Grid utilities */
    .grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
    .grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
    .grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }
    .gap-6 { gap: 1.5rem; }
    .gap-4 { gap: 1rem; }
    
    /* Responsive utilities */
    @media (min-width: 768px) {
        .md\:grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }
    }
    
    @media (min-width: 1024px) {
        .lg\:grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }
        .lg\:col-span-2 { grid-column: span 2 / span 2; }
    }
    
    /* Custom styles for the crypto tracker */
    .crypto-list-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 0.75rem;
        border-radius: 0.5rem;
        cursor: pointer;
        transition: background-color 0.2s;
    }
    .crypto-list-item:hover {
        background-color: #4b5563;
    }
    .crypto-list-item.active {
        background-color: #2563eb;
    }
    .chart-container {
        height: 20rem;
        position: relative;
    }
    .timeframe-button {
        padding: 0.25rem 0.75rem;
        border-radius: 0.375rem;
        background-color: #374151;
        color: white;
        cursor: pointer;
        transition: background-color 0.2s;
    }
    .timeframe-button:hover {
        background-color: #4b5563;
    }
    .timeframe-button.active {
        background-color: #2563eb;
    }
    .trend-up {
        color: #34d399;
    }
    .trend-down {
        color: #f87171;
    }
    .loading-spinner {
        border: 2px solid rgba(255, 255, 255, 0.1);
        border-top-color: #3b82f6;
        border-radius: 50%;
        width: 2.5rem;
        height: 2.5rem;
        animation: spin 1s linear infinite;
    }
</style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // State variables
            let cryptos = [];
            let selectedCrypto = 'bitcoin';
            let timeframe = '7';
            let chartData = null;
            let chart = null;
            
            // DOM elements
            const cryptoListElement = document.getElementById('crypto-list');
            const marketTableElement = document.getElementById('market-table');
            const chartContainer = document.getElementById('chart-container');
            const searchInput = document.getElementById('search-input');
            const refreshButton = document.getElementById('refresh-button');
            const errorContainer = document.getElementById('error-container');
            const timeframeButtons = document.querySelectorAll('.timeframe-button');
            const cryptoDetailsElement = document.getElementById('crypto-details');
            const cryptoStatsElement = document.getElementById('crypto-stats');
            
            // Format helpers
            const formatPrice = (price) => {
                return new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 6
                }).format(price);
            };
            
            const formatMarketCap = (marketCap) => {
                if (marketCap >= 1e12) {
                    return `$${(marketCap / 1e12).toFixed(2)}T`;
                } else if (marketCap >= 1e9) {
                    return `$${(marketCap / 1e9).toFixed(2)}B`;
                } else if (marketCap >= 1e6) {
                    return `$${(marketCap / 1e6).toFixed(2)}M`;
                } else {
                    return `$${marketCap.toFixed(2)}`;
                }
            };
            
            const formatDate = (timestamp) => {
                const date = new Date(timestamp);
                return date.toLocaleDateString();
            };
            
            // Fetch cryptocurrency data
            const fetchCryptos = async () => {
                try {
                    showLoading(true);
                    const response = await axios.get(
                        'https://api.coingecko.com/api/v3/coins/markets',
                        {
                            params: {
                                vs_currency: 'usd',
                                order: 'market_cap_desc',
                                per_page: 20,
                                page: 1,
                                sparkline: false,
                            },
                        }
                    );
                    cryptos = response.data;
                    renderCryptoList();
                    renderMarketTable();
                    updateCryptoDetails();
                    showLoading(false);
                    fetchChartData();
                } catch (err) {
                    showError('Failed to fetch cryptocurrency data. API rate limit may have been reached.');
                    showLoading(false);
                }
            };
            
            // Fetch chart data
            const fetchChartData = async () => {
                try {
                    if (!selectedCrypto) return;
                    
                    const response = await axios.get(
                        `https://api.coingecko.com/api/v3/coins/${selectedCrypto}/market_chart`,
                        {
                            params: {
                                vs_currency: 'usd',
                                days: timeframe,
                            },
                        }
                    );
                    chartData = response.data;
                    renderChart();
                } catch (err) {
                    showError('Failed to fetch chart data. API rate limit may have been reached.');
                }
            };
            
            // Render cryptocurrency list
            const renderCryptoList = () => {
                if (!cryptoListElement) return;
                
                const searchTerm = searchInput ? searchInput.value.toLowerCase() : '';
                const filteredCryptos = cryptos.filter(crypto =>
                    crypto.name.toLowerCase().includes(searchTerm) ||
                    crypto.symbol.toLowerCase().includes(searchTerm)
                );
                
                cryptoListElement.innerHTML = '';
                
                if (filteredCryptos.length === 0) {
                    cryptoListElement.innerHTML = '<div class="text-gray-400 text-center py-4">No cryptocurrencies found</div>';
                    return;
                }
                
                filteredCryptos.forEach(crypto => {
                    const listItem = document.createElement('li');
                    listItem.className = `crypto-list-item ${selectedCrypto === crypto.id ? 'active' : ''}`;
                    listItem.onclick = () => selectCrypto(crypto.id);
                    
                    const priceChangeClass = crypto.price_change_percentage_24h >= 0 ? 'trend-up' : 'trend-down';
                    const trendIcon = crypto.price_change_percentage_24h >= 0 ? 
                        '<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1"><polyline points="23 6 13.5 15.5 8.5 10.5 1 18"></polyline><polyline points="17 6 23 6 23 12"></polyline></svg>' : 
                        '<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1"><polyline points="23 18 13.5 8.5 8.5 13.5 1 6"></polyline><polyline points="17 18 23 18 23 12"></polyline></svg>';
                    
                    listItem.innerHTML = `
                        <div class="flex items-center space-x-3">
                            <img src="${crypto.image}" alt="${crypto.name}" class="w-8 h-8 rounded-full">
                            <div>
                                <p class="font-medium">${crypto.name}</p>
                                <p class="text-sm text-gray-400 uppercase">${crypto.symbol}</p>
                            </div>
                        </div>
                        <div class="text-right">
                            <p class="font-medium">${formatPrice(crypto.current_price)}</p>
                            <p class="text-sm flex items-center justify-end ${priceChangeClass}">
                                ${trendIcon}
                                ${Math.abs(crypto.price_change_percentage_24h).toFixed(2)}%
                            </p>
                        </div>
                    `;
                    
                    cryptoListElement.appendChild(listItem);
                });
            };
            
            // Render market table
            const renderMarketTable = () => {
                if (!marketTableElement) return;
                
                const searchTerm = searchInput ? searchInput.value.toLowerCase() : '';
                const filteredCryptos = cryptos.filter(crypto =>
                    crypto.name.toLowerCase().includes(searchTerm) ||
                    crypto.symbol.toLowerCase().includes(searchTerm)
                );
                
                const tableBody = marketTableElement.querySelector('tbody');
                if (!tableBody) return;
                
                tableBody.innerHTML = '';
                
                filteredCryptos.forEach(crypto => {
                    const row = document.createElement('tr');
                    row.className = 'border-b border-gray-700 hover:bg-gray-700 cursor-pointer';
                    row.onclick = () => selectCrypto(crypto.id);
                    
                    const priceChangeClass = crypto.price_change_percentage_24h >= 0 ? 'trend-up' : 'trend-down';
                    const trendIcon = crypto.price_change_percentage_24h >= 0 ? 
                        '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1"><polyline points="23 6 13.5 15.5 8.5 10.5 1 18"></polyline><polyline points="17 6 23 6 23 12"></polyline></svg>' : 
                        '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1"><polyline points="23 18 13.5 8.5 8.5 13.5 1 6"></polyline><polyline points="17 18 23 18 23 12"></polyline></svg>';
                    
                    row.innerHTML = `
                        <td class="py-4">${crypto.market_cap_rank}</td>
                        <td class="py-4">
                            <div class="flex items-center space-x-3">
                                <img src="${crypto.image}" alt="${crypto.name}" class="w-6 h-6 rounded-full">
                                <div>
                                    <p class="font-medium">${crypto.name}</p>
                                    <p class="text-xs text-gray-400 uppercase">${crypto.symbol}</p>
                                </div>
                            </div>
                        </td>
                        <td class="py-4 text-right">${formatPrice(crypto.current_price)}</td>
                        <td class="py-4 text-right ${priceChangeClass}">
                            <div class="flex items-center justify-end">
                                ${trendIcon}
                                ${Math.abs(crypto.price_change_percentage_24h).toFixed(2)}%
                            </div>
                        </td>
                        <td class="py-4 text-right">${formatMarketCap(crypto.market_cap)}</td>
                        <td class="py-4 text-right">${formatMarketCap(crypto.total_volume)}</td>
                    `;
                    
                    tableBody.appendChild(row);
                });
            };
            
            // Update crypto details
            const updateCryptoDetails = () => {
                if (!cryptoDetailsElement) return;
                
                const crypto = cryptos.find(c => c.id === selectedCrypto);
                if (!crypto) return;
                
                const priceChangeClass = crypto.price_change_percentage_24h >= 0 ? 'trend-up' : 'trend-down';
                const trendIcon = crypto.price_change_percentage_24h >= 0 ? 
                    '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1"><polyline points="23 6 13.5 15.5 8.5 10.5 1 18"></polyline><polyline points="17 6 23 6 23 12"></polyline></svg>' : 
                    '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1"><polyline points="23 18 13.5 8.5 8.5 13.5 1 6"></polyline><polyline points="17 18 23 18 23 12"></polyline></svg>';
                
                cryptoDetailsElement.innerHTML = `
                    <div class="flex items-center space-x-3">
                        <img src="${crypto.image}" alt="${crypto.name}" class="w-10 h-10 rounded-full">
                        <div>
                            <h2 class="text-xl font-bold">${crypto.name}</h2>
                            <div class="flex items-center space-x-2">
                                <span class="text-gray-400 uppercase">${crypto.symbol}</span>
                                <span class="flex items-center ${priceChangeClass}">
                                    ${trendIcon}
                                    ${Math.abs(crypto.price_change_percentage_24h).toFixed(2)}%
                                </span>
                            </div>
                        </div>
                    </div>
                `;
                
                // Update crypto stats
                if (cryptoStatsElement) {
                    cryptoStatsElement.innerHTML = `
                        <div class="bg-gray-700 p-4 rounded-lg">
                            <p class="text-gray-400 text-sm">Current Price</p>
                            <p class="text-xl font-bold">${formatPrice(crypto.current_price)}</p>
                        </div>
                        <div class="bg-gray-700 p-4 rounded-lg">
                            <p class="text-gray-400 text-sm">24h Change</p>
                            <p class="text-xl font-bold ${crypto.price_change_24h >= 0 ? 'trend-up' : 'trend-down'}">
                                ${formatPrice(crypto.price_change_24h)}
                            </p>
                        </div>
                        <div class="bg-gray-700 p-4 rounded-lg">
                            <p class="text-gray-400 text-sm">Market Cap</p>
                            <p class="text-xl font-bold">${formatMarketCap(crypto.market_cap)}</p>
                        </div>
                        <div class="bg-gray-700 p-4 rounded-lg">
                            <p class="text-gray-400 text-sm">24h Volume</p>
                            <p class="text-xl font-bold">${formatMarketCap(crypto.total_volume)}</p>
                        </div>
                    `;
                }
            };
            
            // Render chart
            const renderChart = () => {
                if (!chartContainer || !chartData || !chartData.prices || chartData.prices.length === 0) return;
                
                const canvas = chartContainer.querySelector('canvas');
                if (!canvas) {
                    const newCanvas = document.createElement('canvas');
                    chartContainer.innerHTML = '';
                    chartContainer.appendChild(newCanvas);
                }
                
                // Destroy existing chart if it exists
                if (chart) {
                    chart.destroy();
                }
                
                const ctx = chartContainer.querySelector('canvas').getContext('2d');
                if (!ctx) return;
                
                const crypto = cryptos.find(c => c.id === selectedCrypto);
                const color = crypto && crypto.price_change_percentage_24h >= 0 
                    ? 'rgba(52, 211, 153, 1)' 
                    : 'rgba(239, 68, 68, 1)';
                
                const gradient = ctx.createLinearGradient(0, 0, 0, 400);
                gradient.addColorStop(0, crypto && crypto.price_change_percentage_24h >= 0 
                    ? 'rgba(52, 211, 153, 0.5)' 
                    : 'rgba(239, 68, 68, 0.5)');
                gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');
                
                chart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: chartData.prices.map(price => formatDate(price[0])),
                        datasets: [{
                            label: 'Price',
                            data: chartData.prices.map(price => price[1]),
                            borderColor: color,
                            backgroundColor: gradient,
                            borderWidth: 2,
                            pointRadius: 0,
                            pointHoverRadius: 4,
                            tension: 0.4,
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: false
                            },
                            tooltip: {
                                mode: 'index',
                                intersect: false,
                                callbacks: {
                                    label: function(context) {
                                        return `Price: ${formatPrice(context.raw)}`;
                                    }
                                }
                            }
                        },
                        scales: {
                            x: {
                                grid: {
                                    display: false
                                },
                                ticks: {
                                    maxTicksLimit: 8,
                                    callback: function(value, index) {
                                        if (chartData && chartData.prices && chartData.prices.length > 0) {
                                            const dataPointIndex = Math.min(
                                                Math.floor(index * (chartData.prices.length / 8)),
                                                chartData.prices.length - 1
                                            );
                                            if (dataPointIndex >= 0 && chartData.prices[dataPointIndex]) {
                                                return formatDate(chartData.prices[dataPointIndex][0]);
                                            }
                                        }
                                        return '';
                                    }
                                }
                            },
                            y: {
                                grid: {
                                    color: 'rgba(200, 200, 200, 0.2)'
                                },
                                ticks: {
                                    callback: function(value) {
                                        return formatPrice(value);
                                    }
                                }
                            }
                        },
                        interaction: {
                            intersect: false,
                            mode: 'index'
                        }
                    }
                });
            };
            
            // Select cryptocurrency
            const selectCrypto = (cryptoId) => {
                selectedCrypto = cryptoId;
                updateCryptoDetails();
                fetchChartData();
                renderCryptoList(); // Update active state in list
            };
            
            // Select timeframe
            const selectTimeframe = (newTimeframe) => {
                timeframe = newTimeframe;
                
                // Update active state for timeframe buttons
                timeframeButtons.forEach(button => {
                    if (button.dataset.timeframe === timeframe) {
                        button.classList.add('active');
                    } else {
                        button.classList.remove('active');
                    }
                });
                
                fetchChartData();
            };
            
            // Show/hide loading spinner
            const showLoading = (isLoading) => {
                const loadingSpinner = document.getElementById('loading-spinner');
                if (loadingSpinner) {
                    loadingSpinner.style.display = isLoading ? 'flex' : 'none';
                }
                
                if (refreshButton) {
                    const refreshIcon = refreshButton.querySelector('svg');
                    if (refreshIcon) {
                        if (isLoading) {
                            refreshIcon.classList.add('animate-spin');
                        } else {
                            refreshIcon.classList.remove('animate-spin');
                        }
                    }
                }
            };
            
            // Show error message
            const showError = (message) => {
                if (!errorContainer) return;
                
                errorContainer.innerHTML = message;
                errorContainer.style.display = message ? 'block' : 'none';
            };
            
            // Event listeners
            if (searchInput) {
                searchInput.addEventListener('input', () => {
                    renderCryptoList();
                    renderMarketTable();
                });
            }
            
            if (refreshButton) {
                refreshButton.addEventListener('click', fetchCryptos);
            }
            
            timeframeButtons.forEach(button => {
                button.addEventListener('click', () => {
                    selectTimeframe(button.dataset.timeframe);
                });
            });
            
            // Initialize
            fetchCryptos();
        });
    </script>
{% endblock %}

{% block body %}
    <div class="min-h-screen bg-gray-900 text-white">
        <!-- Header -->
        <header class="bg-gray-800 py-4 px-6 shadow-md">
                        <a onclick="window.history.back();" class="back-button">
        ← Retour
    </a>
            <div class="container mx-auto flex justify-between items-center">
                <div class="flex items-center space-x-2">
                    <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-yellow-500">
                        <path d="M11.767 19.089c4.924.868 6.14-6.025 1.216-6.894m-1.216 6.894L5.86 18.047m5.908 1.042-.347 1.97m1.563-8.864c4.924.869 6.14-6.025 1.215-6.893m-1.215 6.893-3.94-.694m5.155-6.2L8.29 4.26m5.908 1.042.348-1.97"></path>
                    </svg>
                    <h1 class="text-2xl font-bold">CryptoTracker</h1>
                </div>
            </div>
        </header>

        <main class="container mx-auto py-6 px-4">
            <!-- Error Container -->
            <div id="error-container" class="bg-red-500 text-white p-4 rounded-md mb-6" style="display: none;"></div>

            <!-- Search Bar -->
            <div class="mb-6 relative">
                <div class="relative">
                    <input
                        type="text"
                        id="search-input"
                        placeholder="Search cryptocurrencies..."
                        class="w-full bg-gray-800 border border-gray-700 rounded-lg py-3 px-4 pl-12 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                        aria-label="Search cryptocurrencies"
                    />
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="absolute left-4 top-3.5 h-5 w-5 text-gray-400">
                        <circle cx="11" cy="11" r="8"></circle><path d="m21 21-4.3-4.3"></path>
                    </svg>
                </div>
            </div>

            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <!-- Chart Section -->
                <div class="lg:col-span-2 bg-gray-800 rounded-xl p-6 shadow-lg">
                    <div class="flex justify-between items-center mb-6">
                        <div id="crypto-details">
                            <!-- Crypto details will be populated by JavaScript -->
                            <div class="flex items-center space-x-3">
                                <div class="w-10 h-10 rounded-full bg-gray-700" aria-hidden="true"></div>
                                <div>
                                    <h2 class="text-xl font-bold">Loading...</h2>
                                    <div class="flex items-center space-x-2">
                                        <span class="text-gray-400">...</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="flex space-x-2">
                            <button data-timeframe="1" class="timeframe-button">24h</button>
                            <button data-timeframe="7" class="timeframe-button active">7d</button>
                            <button data-timeframe="30" class="timeframe-button">30d</button>
                            <button data-timeframe="365" class="timeframe-button">1y</button>
                        </div>
                    </div>
                    
                    <div id="chart-container" class="chart-container">
                        <div class="h-full flex items-center justify-center">
                            <p class="text-gray-400">Loading chart data...</p>
                        </div>
                    </div>

                    <div id="crypto-stats" class="mt-6 grid grid-cols-2 md:grid-cols-4 gap-4">
                        <!-- Crypto stats will be populated by JavaScript -->
                        <div class="bg-gray-700 p-4 rounded-lg">
                            <p class="text-gray-400 text-sm">Current Price</p>
                            <p class="text-xl font-bold">Loading...</p>
                        </div>
                        <div class="bg-gray-700 p-4 rounded-lg">
                            <p class="text-gray-400 text-sm">24h Change</p>
                            <p class="text-xl font-bold">Loading...</p>
                        </div>
                        <div class="bg-gray-700 p-4 rounded-lg">
                            <p class="text-gray-400 text-sm">Market Cap</p>
                            <p class="text-xl font-bold">Loading...</p>
                        </div>
                        <div class="bg-gray-700 p-4 rounded-lg">
                            <p class="text-gray-400 text-sm">24h Volume</p>
                            <p class="text-xl font-bold">Loading...</p>
                        </div>
                    </div>
                </div>

                <!-- Crypto List -->
                <div class="bg-gray-800 rounded-xl p-6 shadow-lg overflow-hidden">
                    <h2 class="text-xl font-bold mb-4">Top Cryptocurrencies</h2>
                    <div class="overflow-y-auto max-h-[600px] pr-2 -mr-2">
                        <div id="loading-spinner" class="flex justify-center items-center h-40">
                            <div class="loading-spinner"></div>
                        </div>
                        <ul id="crypto-list" class="space-y-3">
                            <!-- Crypto list will be populated by JavaScript -->
                        </ul>
                    </div>
                </div>
            </div>

            <!-- Market Overview -->
            <div class="mt-6 bg-gray-800 rounded-xl p-6 shadow-lg">
                <h2 class="text-xl font-bold mb-4">Market Overview</h2>
                <div class="overflow-x-auto">
                    <table class="min-w-full">
                        <thead>
                            <tr class="border-b border-gray-700">
                                <th class="py-3 text-left">#</th>
                                <th class="py-3 text-left">Name</th>
                                <th class="py-3 text-right">Price</th>
                                <th class="py-3 text-right">24h %</th>
                                <th class="py-3 text-right">Market Cap</th>
                                <th class="py-3 text-right">Volume (24h)</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Market table will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
        </main>

        <footer class="bg-gray-800 py-6 mt-12">
            <div class="container mx-auto px-4 text-center text-gray-400">
                <p>Data provided by CoinGecko API. Updated in real-time.</p>
                <p class="mt-2">&copy; {{ "now"|date("Y") }} CryptoTracker. All rights reserved.</p>
            </div>
        </footer>
    </div>
{% endblock %}