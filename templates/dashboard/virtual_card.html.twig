{% extends 'base.html.twig' %}

{% block title %}Virtual Card{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
      body {
    margin: 0px;
    font-family: 'Roboto', Arial, sans-serif;
    overflow: hidden;
}

h1 {
    position: absolute;
    right: 80px; /* Distance du bord droit */
    top: 5%;
    transform: translateY(-50%);
    font-size: 28px;
    font-weight: bold;
    color: #007BFF;
}

.back-button {
    position: absolute;
    top: 20px;
    left: 20px;
    background: transparent;
    color: white;
    padding: 10px 15px;
    text-decoration: none;
    border-radius: 5px;
    font-size: 1em;
    font-weight: bold;
}

.back-button:hover {
    background-color: #0056b3;
}

.min-h-screen {
    min-height: 100vh;
}

.bg-gradient-to-br {
    background-image: linear-gradient(to bottom right, var(--tw-gradient-stops));
}

.from-purple-900 {
    --tw-gradient-from: #581c87;
    --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to, rgb(88 28 135 / 0));
}

.via-blue-900 {
    --tw-gradient-via: #1e3a8a;
    --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-via), var(--tw-gradient-to, rgb(30 58 138 / 0));
}

.to-black {
    --tw-gradient-to: #000;
}

.flex {
    display: flex;
}

.items-center {
    align-items: center;
}

.items-start {
    align-items: flex-start;
}

.items-end {
    align-items: flex-end;
}

.justify-center {
    justify-content: center;
}

.justify-between {
    justify-content: space-between;
}

.justify-end {
    justify-content: flex-end;
}

.p-8 {
    padding: 2rem;
}

.px-4 {
    padding-left: 1rem;
    padding-right: 1rem;
}

.max-w-md {
    max-width: 28rem;
}

.w-full {
    width: 100%;
}

.w-12 {
    width: 3rem;
}

.w-8 {
    width: 2rem;
}

.h-12 {
    height: 3rem;
}

.h-10 {
    height: 2.5rem;
}

.h-8 {
    height: 2rem;
}

.text-4xl {
    font-size: 2.25rem;
    line-height: 2.5rem;
}

.text-2xl {
    font-size: 1.5rem;
    line-height: 2rem;
}

.text-xs {
    font-size: 0.75rem;
    line-height: 1rem;
}

.font-bold {
    font-weight: 700;
}

.font-semibold {
    font-weight: 600;
}

.font-mono {
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
}

.text-white {
    color: #fff;
}

.text-gray-200 {
    color: #e5e7eb;
}

.text-gray-400 {
    color: #9ca3af;
}

.text-gray-300 {
    color: #d1d5db;
}

.text-center {
    text-align: center;
}

.mb-12 {
    margin-bottom: 3rem;
}

.mt-8 {
    margin-top: 2rem;
}

.mt-4 {
    margin-top: 1rem;
}

.mt-2 {
    margin-top: 0.5rem;
}

.tracking-wider {
    letter-spacing: 0.05em;
}

.perspective-1000 {
    perspective: 1000px;
}

.transform-style-3d {
    transform-style: preserve-3d;
}

.backface-hidden {
    backface-visibility: hidden;
}

.rotate-y-180 {
    transform: rotateY(180deg);
}

.relative {
    position: relative;
}

.absolute {
    position: absolute;
}

.inset-0 {
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
}

.bottom-8 {
    bottom: 2rem;
}

.right-8 {
    right: 2rem;
}

.aspect-\[1\.586\] {
    aspect-ratio: 1.586;
}

.transition-transform {
    transition-property: transform;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 500ms;
}

.duration-500 {
    transition-duration: 500ms;
}

.ease-out {
    transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
}

.cursor-pointer {
    cursor: pointer;
}

.rounded-2xl {
    border-radius: 1rem;
}

.shadow-2xl {
    --tw-shadow: 0 25px 50px -12px rgb(0 0 0 / 0.25);
    --tw-shadow-colored: 0 25px 50px -12px var(--tw-shadow-color);
    box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
}

.bg-gradient-to-br.from-violet-600.to-indigo-600 {
    background-image: linear-gradient(to bottom right, #7c3aed, #4f46e5);
}

.bg-gradient-to-br.from-gray-800.to-gray-900 {
    background-image: linear-gradient(to bottom right, #1f2937, #111827);
}

.bg-gray-700 {
    background-color: #374151;
}

.bg-white {
    background-color: #fff;
}

.opacity-50 {
    opacity: 0.5;
}

.card-placeholder {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 300px;
    width: 500px;
    position: relative;
    margin: auto;
}

.blurred-card {
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border-radius: 15px;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
    animation: floating 3s infinite ease-in-out;
}

.no-card-text {
    color: white;
    font-size: 1.5rem;
    font-weight: bold;
    text-align: center;
    text-transform: uppercase;
    opacity: 0.8;
}

@keyframes floating {
    0% {
        transform: translateY(0);
    }
    50% {
        transform: translateY(-10px);
    }
    100% {
        transform: translateY(0);
    }
}

/* 3D card effect */
#card-container {
    perspective: 1000px;
    display: flex;
    justify-content: center;
    align-items: center;
}

#card {
    transform-style: preserve-3d;
    width: 100%;
    height: 100%;
    position: relative;
    cursor: pointer;
    transition: transform 0.5s ease-out;
}

#card:hover {
    transform: rotateY(180deg);
}

#card .backface-hidden {
    backface-visibility: hidden;
}

#card .rotate-y-180 {
    transform: rotateY(180deg);
}

    </style>
{% endblock %}

{% block body %}
<a href="javascript:history.back()" class="back-button">‚Üê Retour</a>

<h1>Ma carte virtuelle</h1>
<div class="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-black flex items-center justify-center p-8">
    <div class="max-w-md w-full">
        {% if cardOrder %}
            <div class="perspective-1000" id="card-container">
                <div class="relative w-full aspect-[1.586] transition-transform duration-500 ease-out transform-style-3d cursor-pointer rounded-2xl shadow-2xl bg-gradient-to-br"
                    id="card"
                    {% if cardOrder.cardType == 'gold' %}
                        style="background: linear-gradient(to bottom right, #facc15, #ca8a04);"
                    {% elseif cardOrder.cardType == 'premium' %}
                        style="background: linear-gradient(to bottom right, #4b5563, #1f2937);"
                    {% else %}
                        style="background: linear-gradient(to bottom right, #7c3aed, #4f46e5);"
                    {% endif %}>

                    <!-- Front of the card -->
                    <div class="absolute inset-0 rounded-2xl p-8 backface-hidden shadow-2xl">
                        <div class="flex justify-between items-start">
                            <svg class="text-white w-8 h-8" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M5 12.55a11 11 0 0 1 14.08 0"/>
                                <path d="M1.42 9a16 16 0 0 1 21.16 0"/>
                                <path d="M8.53 16.11a6 6 0 0 1 6.95 0"/>
                            </svg>
                        </div>
                        
                        <div class="mt-8">
                            <p class="font-mono text-2xl text-white tracking-wider">**** **** **** {{ cardOrder.cardNumber|slice(-4) }}</p>
                        </div>
                        
                        <div class="mt-8 flex justify-between items-end">
                            <div>
                                <p class="text-gray-200 text-xs">Card Holder</p>
                                <p class="text-white font-semibold">{{ app.user.nom|upper }} {{ app.user.prenom|capitalize }}</p>
                            </div>
                            <div>
                                <p class="text-gray-200 text-xs">Expires</p>
                                <p class="text-white font-semibold">{{ cardOrder.expirationDate|date('m/Y') }}</p>
                            </div>
                        </div>
                    </div>

                    <!-- Back of the card -->
                    <div class="absolute inset-0 rounded-2xl p-8 backface-hidden shadow-2xl rotate-y-180"
    {% if cardOrder.cardType == 'gold' %}
        style="background: linear-gradient(to bottom right, #facc15, #ca8a04);"
    {% elseif cardOrder.cardType == 'premium' %}
        style="background: linear-gradient(to bottom right, #4b5563, #1f2937);"
    {% else %}
        style="background: linear-gradient(to bottom right, #7c3aed, #4f46e5);"
    {% endif %}>

                        <div class="w-full h-12 bg-gray-700 mt-4"></div>
                        <div class="mt-8 px-4">
                            <div class="bg-white h-10 flex items-center justify-end px-4">
                                <p class="font-mono">{{ cardOrder.ccv }}</p>
                            </div>
                            <p class="text-gray-400 text-xs mt-2">Security Code</p>
                        </div>
                        <div class="absolute bottom-8 right-8">
                            <svg class="text-white w-12 h-12 opacity-50" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <rect width="20" height="14" x="2" y="5" rx="2"/>
                                <line x1="2" x2="22" y1="10" y2="10"/>
                            </svg>
                        </div>
                    </div>
                </div>
            </div>

        {% else %}
            <div class="card-placeholder">
                <div class="blurred-card">
                    <p class="no-card-text">Vous n'avez pas encore de carte</p>
                </div>
            </div>
        {% endif %}
    </div>
</div>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const card = document.getElementById('card');
            const container = document.getElementById('card-container');
            let isFlipped = false;

            container.addEventListener('click', () => {
                isFlipped = !isFlipped;
                if (isFlipped) {
                    card.style.transform = 'rotateY(180deg)';
                } else {
                    card.style.transform = 'rotateY(0)';
                }
            });

            container.addEventListener('mousemove', (e) => {
                const rect = card.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                
                const centerX = rect.width / 2;
                const centerY = rect.height / 2;
                
                const rotateX = (y - centerY) / 10;
                const rotateY = (centerX - x) / 10;

                card.style.transform = `rotateX(${rotateX}deg) rotateY(${rotateY}deg) ${isFlipped ? 'rotateY(180deg)' : ''}`;
            });

            container.addEventListener('mouseleave', () => {
                card.style.transform = isFlipped ? 'rotateY(180deg)' : 'rotateY(0)';
            });
        });
    </script>
{% endblock %}